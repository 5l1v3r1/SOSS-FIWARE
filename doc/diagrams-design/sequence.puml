@startuml
actor other_sh
actor soss_core
participant SystemHandle
participant Publisher
participant Subscriber
participant conversion
participant Connector
participant Listener
entity fiware

== initialization ==
soss_core -> SystemHandle: configure
activate SystemHandle
SystemHandle -> Connector: __init__()
Connector -> Listener: __init__()
SystemHandle -> Connector: request_types()
activate Connector
Connector -[#0000FF]> fiware: send_request()
SystemHandle <-- Connector: types_json_description
deactivate Connector
SystemHandle -> conversion: fiware_type_to_soss_type()
activate conversion
SystemHandle <-- conversion: xtypes
deactivate conversion
soss_core <-- SystemHandle: status
deactivate SystemHandle

soss_core -> SystemHandle: advertise
activate SystemHandle
SystemHandle -> Publisher: __init__()
soss_core <-- SystemHandle: TopicPublisher
deactivate SystemHandle

soss_core -> SystemHandle: subscribe
activate SystemHandle
SystemHandle -> Subscriber: __init__()
SystemHandle -> Subscriber: subscribe()
activate Subscriber
Subscriber -> Connector: register_subscription()
activate Connector
Connector -> Listener: run()
activate Listener
activate Listener
Connector <-- Listener: status
deactivate Listener
Listener -> Listener: listen()
Connector -[#0000FF]> fiware: send_request()
Subscriber <-- Connector: status
deactivate Connector
SystemHandle <-- Subscriber: status
deactivate Subscriber
soss_core <-- SystemHandle: status
deactivate SystemHandle

== to fiware ==
other_sh -> Publisher: publish()
activate Publisher
Publisher -> conversion: soss_to_fiware()
activate conversion
Publisher <-- conversion: fiware_message
deactivate conversion
Publisher -> Connector: update_entity()
activate Connector
Connector -[#0000FF]> fiware: send_request()
Publisher <-- Connector: status
deactivate Connector
other_sh <-- Publisher: status
deactivate Publisher

== from fiware ==
fiware -[#0000FF]> Listener: recv_request()
activate Listener
Listener -> Connector: receive_cb()
activate Connector
Connector -> Subscriber: receive_cb()
activate Subscriber
Subscriber -> conversion: fiware_to_soss()
activate conversion
Subscriber <-- conversion: soss_message
deactivate conversion
Subscriber -> other_sh: soss_subscription_cb()
Connector <-- Subscriber: ok
deactivate Subscriber
Listener <-- Connector: ok
deactivate Connector
deactivate Listener

== while running ==
soss_core -> SystemHandle: spin_once
activate SystemHandle
SystemHandle -> Connector: check_status()
activate Connector
Connector -> Listener: check_status()
activate Listener
Connector <-- Listener: status
deactivate Listener
SystemHandle <-- Connector: status
deactivate Connector
SystemHandle -> SystemHandle: wait_100ms()
soss_core <-- SystemHandle: status
deactivate SystemHandle

== destruction ==
soss_core -> SystemHandle: __destroy__()
activate SystemHandle
SystemHandle -> Subscriber: __destroy__()
activate Subscriber
Subscriber -> Connector: unregister_subscription()
activate Connector
Connector -[#0000FF]> fiware: send_request()
Connector -> Listener: stop()
activate Listener
Connector <-- Listener: status
deactivate Listener
deactivate Listener
deactivate Connector
deactivate Subscriber
deactivate SystemHandle

@enduml
